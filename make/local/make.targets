# this local Makefile includes the cluster targets

OPTHOST      := $(shell uname -n | sed 's/\(.zib.de\)//g' | tr '[:upper:]' '[:lower:]' | tr -cd '[:alpha:].-')

-include make/local/make.$(OPTHOST)

PERMUTE		=	0

.PHONY: tlint
tlint:		$(ALLSRC)
		-rm -f lint.out
ifeq ($(FILES),)
		$(SHELL) -ec 'for i in $^; \
			do \
			echo $$i; \
			$(LINT) lint/co-gcc.lnt lint/$(MAINNAME)-test.lnt +os\(lint.out\) -u -zero \
			$(FLAGS) -dCPLEXSOLVER -UNDEBUG -UWITH_READLINE -UROUNDING_FE $$i; \
			done'
else
		$(SHELL) -ec  'for i in $(FILES); \
			do \
			echo $$i; \
			$(LINT) lint/co-gcc.lnt lint/$(MAINNAME)-test.lnt +os\(lint.out\) -u -zero \
			$(FLAGS) -dCPLEXSOLVER -UNDEBUG -UWITH_READLINE -UROUNDING_FE $$i; \
			done'
endif


.PHONY: testdip
testdip:
		cd check; \
		$(SHELL) ./check_dip.sh $(TEST) $(DIP) $(SETTINGS) \
		$(OSTYPE).$(ARCH).$(HOSTNAME) $(TIME) $(NODES) $(MEM) \
		$(THREADS) $(FEASTOL) $(CONTINUE);

.PHONY: testcluster
testcluster:
		cd check; \
		$(SHELL) ./check_cluster.sh $(TEST) $(MAINFILE) $(SETTINGS) $(MASTERSETTINGS) \
		$(notdir $(MAINFILE)).$(HOSTNAME) $(TIME) $(NODES) $(MEM) \
		$(THREADS) $(FEASTOL) $(LPS) $(DISPFREQ) $(CONTINUE) \
		$(QUEUETYPE) $(QUEUE) $(PPN) $(CLIENTTMPDIR) $(NOWAITCLUSTER) $(EXCLUSIVE) \
		$(PERMUTE) $(MODE) $(STATISTICS) $(PROJECT);

.PHONY: testclusterdip
testclusterdip:
		cd check; \
		$(SHELL) ./check_cluster_dip.sh $(TEST) $(DIP) $(SETTINGS) \
		$(OSTYPE).$(ARCH).$(HOSTNAME) $(TIME) $(NODES) $(MEM) \
		$(THREADS) $(FEASTOL) $(DISPFREQ) $(CONTINUE) \
		$(QUEUETYPE) $(QUEUE) $(PPN) $(CLIENTTMPDIR) $(NOWAITCLUSTER) $(EXCLUSIVE);

.PHONY: testclustercpx
testclustercpx:
		cd check; \
		$(SHELL) ./check_cluster_cplex.sh $(TEST) $(CPLEX) $(SETTINGS) \
		$(OSTYPE).$(ARCH).$(HOSTNAME) $(TIME) $(NODES) $(MEM) \
		$(THREADS) $(FEASTOL) $(DISPFREQ) $(CONTINUE) $(QUEUE) $(PPN) \
		$(CLIENTTMPDIR)  $(NOWAITCLUSTER);


.PHONY: testexamples
testexamples:
		@$(foreach EXAMPLE, $(SCIPEXAMPLES), $(MAKE) -C examples/$(EXAMPLE) $^ test || exit 1;)

# google testing framework
TESTNAME	=	gcg_test
TESTOBJ		=	tests/test.o \
			tests/graphtest.o \
			tests/bipartitegraph_test.o \
			tests/hyperrowcolgraph_test.o \
			tests/hypercolgraph_test.o \
			tests/hyperrowgraph_test.o \
			tests/weights_test.o \
			tests/aggregation_test.o \
			tests/statistic_test.o \
			tests/rowgraph_test.o \
			tests/columngraph_test.o \
			tests/decomp_test.o \
			tests/polish_test.o \
			tests/gcgvar_test.o \
			tests/graphalgorithm_test.o \
			tests/gcgcol_test.o \
			tests/colpool_test.o
#			tests/hypergraph_test.o \


TESTSRCDIR	=	$(SRCDIR)/tests

TESTSRC		=	$(filter $(wildcard $(TESTSRCDIR)/*.c),$(addprefix $(SRCDIR)/,$(TESTOBJ:.o=.c))) $(filter $(wildcard $(TESTSRCDIR)/*.cpp),$(addprefix $(SRCDIR)/,$(TESTOBJ:.o=.cpp)))
TESTDEP		=	$(SRCDIR)/depend.tests.$(OPT)

TESTMAIN	=	$(TESTNAME).$(BASE).$(LPS)$(EXEEXTENSION)
TESTFILE	=	$(BINDIR)/$(TESTMAIN)
TESTSHORTLINK	=	$(BINDIR)/$(TESTNAME)
TESTOBJFILES	=	$(addprefix $(OBJDIR)/,$(TESTOBJ))
TESTOBJDIR      =	$(OBJDIR)/tests
TESTLDFLAGS	+=	$(LINKCXX_L)$(LIBDIR) $(LINKCXX_l)pthread

ifeq ($(GTEST),true)
TESTLDFLAGS	+=	$(LINKCXX_l)gtest
SOFTLINKS	+=	$(LIBDIR)/include/gtest
SOFTLINKS	+=	$(LIBDIR)/static/libgtest.$(STATICLIBEXT)

LINKMSG		+=	"googletest testing framework links:\n"
LINKMSG		+=	" -> gtest is the path to the googletest include files, e.g., \"googletest-1.7.0/include/gtest\"\n"
LINKMSG		+=	" -> \"libgtest.$(STATICLIBEXT)\" is the path to the googletest library, e.g., \"googletest-1.7.0/build/libgtest.$(STATICLIBEXT)\"\n"
endif

.PHONY: testdepend
testdepend::
ifeq ($(GTEST),true)
		$(SHELL) -ec '$(DCXX) $(DCXXFLAGS) $(subst isystem,I,$(FLAGS)) -Ilib/include $(DFLAGS) $(TESTSRC) \
		| sed '\''s|^\([0-9A-Za-z\_]\{1,\}\)\.o *: *$(TESTSRCDIR)/\([0-9A-Za-z_/]*\).c|$$\(TESTOBJDIR\)/\2.o: $(TESTSRCDIR)/\2.c|g'\'' \
		>$(TESTDEP)'
endif
-include	$(TESTDEP)

$(TESTOBJDIR):	$(OBJDIR)
		@-mkdir -p $(TESTOBJDIR)

.PHONY: googletest
googletest:
		-mkdir lib/googletest-git/build
		cd lib/googletest-git/build && cmake ../
		cd lib/googletest-git/build && make

.PHONY: bliss
bliss:
ifneq ("$(wildcard lib/scip-git/src/bliss/Makefile-manual)","")
		-mkdir -p lib/scip-git/src/bliss/build
		@$(MAKE) -C lib/scip-git/src/bliss -f Makefile-manual
else
		@$(MAKE) -C lib/scip-git/src/bliss
endif
		-ln -sfn ../scip-git/src/bliss/include/bliss lib/include/
		-ln -sfn ../scip-git/src/bliss/libbliss_static.a lib/static/libbliss.a

.PHONY: cliquer
cliquer: cliquerobj cliquerlib

.PHONY: cliquerobj
cliquerobj:
		@$(MAKE) -C lib/cliquer-git

.PHONY: cliquerlib
cliquerlib:
		@echo "-> generating library lib/cliquer-git/libcliquer.a"
		@-rm -f lib/cliquer-git/libcliquer.a
		@$(LIBBUILD) $(LIBBUILDFLAGS) lib/cliquer-git/libcliquer.a lib/cliquer-git/*.o
ifneq ($(RANLIB),)
		@$(RANLIB) lib/cliquer-git/libcliquer.a
endif

.PHONY: soplex
soplex:
		@$(MAKE) -C lib/soplex-git OPT=opt

ifeq ($(BLISS),true)
DEPS += bliss
endif
ifeq ($(CLIQUER),true)
DEPS += cliquer
endif
ifeq ($(GTEST),true)
DEPS += googletest
endif

.PHONY: deps
deps:		$(DIRECTORIES) $(DEPS) soplex scip

.PHONY: tests
tests::		$(TESTOBJDIR) $(TESTFILE) $(TESTSHORTLINK) $(GCGLIBFILE)



$(TESTSHORTLINK):	$(TESTFILE)
		@rm -f $@
		cd $(dir $@) && ln -s $(notdir $(TESTFILE)) $(notdir $@)

$(TESTFILE):	$(BINDIR) $(OBJDIR) $(SCIPLIBBASEFILE) libs $(LPILIBFILE) $(TPILIBFILE) $(TESTOBJFILES)
		@echo "-> linking $@"
		$(LINKCXX) $(TESTOBJFILES) $(LINKCXX_l)$(GCGLIB) \
		$(LINKCXX_L)$(SCIPDIR)/lib/static $(LINKCXX_l)$(SCIPLIBBASE)$(LINKLIBSUFFIX) \
		$(LINKCXX_l)$(OBJSCIPLIB)$(LINKLIBSUFFIX) $(LINKCXX_l)$(LPILIB)$(LINKLIBSUFFIX) \
		$(LINKCXX_l)$(TPILIB)$(LINKLIBSUFFIX) $(TESTLDFLAGS) \
		$(OFLAGS) $(LPSLDFLAGS) $(LDFLAGS) \
		$(LINKCXX_o)$@

ifeq ($(GTEST),true)
ifeq ($(COMP),gnu)
FLAGS+=-isystem$(LIBDIR)/include/
else
FLAGS+=-I$(LIBDIR)/include/
endif
endif

.PHONY: coverage
coverage: tests
#		-ln -sf ../../../../src $(OBJDIR)/lib/graph/
		-ln -sf ../../../../lib $(OBJDIR)/lib/graph/
#		-ln -sf ../../../src $(OBJDIR)/lib/
		-ln -sf ../../../lib $(OBJDIR)/lib/
#		-ln -sf ../../../src $(OBJDIR)/tests/
		-ln -sf ../../../lib $(OBJDIR)/tests/
#		-ln -sf ../../src $(OBJDIR)/
		-mkdir -p gcov
		lcov -d $(OBJDIR) -z
		bin/gcg_test
		make  $^ test
		make  $^ TIME=60 TEST=regression test
		lcov --config-file lcovrc -d $(OBJDIR) -c >gcov/gcg.capture.tmp
		lcov --config-file lcovrc -r gcov/gcg.capture.tmp "/usr/include/*" > gcov/gcg.capture
		mv gcov/gcg.capture gcov/gcg.capture.tmp
		lcov --config-file lcovrc -r gcov/gcg.capture.tmp "*lib/scip/*" > gcov/gcg.capture
		mv gcov/gcg.capture gcov/gcg.capture.tmp
		lcov --config-file lcovrc -r gcov/gcg.capture.tmp "*lib/include/bliss/*" > gcov/gcg.capture
		mv gcov/gcg.capture gcov/gcg.capture.tmp
		lcov --config-file lcovrc -r gcov/gcg.capture.tmp "*lib/include/cliquer/*" > gcov/gcg.capture
		mv gcov/gcg.capture gcov/gcg.capture.tmp
		lcov --config-file lcovrc -r gcov/gcg.capture.tmp "*lib/gtest/*" > gcov/gcg.capture
		mv gcov/gcg.capture gcov/gcg.capture.tmp
		lcov --config-file lcovrc -r gcov/gcg.capture.tmp "src/tests/*" > gcov/gcg.capture
		genhtml --config-file lcovrc -o gcov gcov/gcg.capture
