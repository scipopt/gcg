/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
/*                                                                           */
/*                  This file is part of the program and library             */
/*         SCIP --- Solving Constraint Integer Programs                      */
/*                                                                           */
/*  Copyright (c) 2002-2023 Zuse Institute Berlin (ZIB)                      */
/*                                                                           */
/*  Licensed under the Apache License, Version 2.0 (the "License");          */
/*  you may not use this file except in compliance with the License.         */
/*  You may obtain a copy of the License at                                  */
/*                                                                           */
/*      http://www.apache.org/licenses/LICENSE-2.0                           */
/*                                                                           */
/*  Unless required by applicable law or agreed to in writing, software      */
/*  distributed under the License is distributed on an "AS IS" BASIS,        */
/*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. */
/*  See the License for the specific language governing permissions and      */
/*  limitations under the License.                                           */
/*                                                                           */
/*  You should have received a copy of the Apache-2.0 license                */
/*  along with SCIP; see the file LICENSE. If not visit scipopt.org.         */
/*                                                                           */
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/**@file        event_sepacuts.h
 * @ingroup     EVENTS
 * @brief       eventhdlr for xyz event
 * @author      Chantal Reinartz Groba
 */

/*---+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8----+----9----+----0----+----1----+----2*/

#ifndef __SCIP_EVENT_SEPACUTS_H__
#define __SCIP_EVENT_SEPACUTS_H__


#include <scip/scip.h>

#include "def.h"
#include "mastercutdata.h"
#include "struct_mastersepacutdata.h"
#include "type_varhistory.h"

#ifdef __cplusplus
extern "C" {
#endif


/** creates event handler for row added to LP and node deleted event */
GCG_EXPORT
SCIP_RETCODE SCIPincludeEventHdlrSepaCuts(
   SCIP*                 scip                /**< SCIP data structure */
);

/** removes new cuts from activectus which are not in LP and releases them */
SCIP_RETCODE GCGremoveNewInactiveRows(
   SCIP*       masterscip,     /**< SCIP data structure */
   int         startidx        /**< indicate the first new cut */
);

/** return active cuts */
GCG_MASTERSEPACUT** GCGgetActiveCuts(
   SCIP*          masterscip     /**< SCIP data structure */
);

/** return number of active cuts */
int GCGgetNActiveCuts(
   SCIP*       masterscip     /**< SCIP data structure */
);

/** removes all cuts after given number of cut from active cuts */
SCIP_RETCODE GCGshrinkActiveCuts(
   SCIP*    masterscip,        /**< SCIP data structure */
   int      newnrows           /**< index to which active cuts should be shrunk to */
);

/** adds a cut generated by a master separator to active cuts */
SCIP_RETCODE GCGaddCutActiveCuts(
   SCIP*                masterscip,      /**< SCIP data structure */
   GCG_MASTERSEPACUT*   mastersepacut    /**< master separator cut */
);

/** remove all cuts in generated cuts and release them */
SCIP_RETCODE GCGclearGeneratedCuts(
   SCIP*    masterscip          /**< SCIP data structure */
);

/** adds a new cut to generated cut storage */
SCIP_RETCODE GCGaddCutToGeneratedCuts(
   SCIP*                masterscip,       /**< SCIP data structure */
   GCG_MASTERSEPACUT*   mastersepacut     /**< mastercut data */
);

#ifdef __cplusplus
}
#endif

#endif
